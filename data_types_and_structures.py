# -*- coding: utf-8 -*-
"""Data Types and Structures.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e-6Vje-2OsSJL9ZWPT7f0bnt02_Tnn1o

#Data Types and Structures

Q1. What are data structures, and why are they important?

ANS: Data structures are specialized formats for organizing, storing, and retrieving data efficiently.

Importance:
Efficiency → Provide faster access and manipulation (e.g., dictionary lookups in O(1)).

Scalability → Handle large volumes of data.

Reusability → Common algorithms work on standard structures (stacks, queues, trees).

Real-world applications → Databases, operating systems, search engines, compilers.

Example:

Using a queue in ticket booking ensures "first come, first served".

Using a hash table (dictionary) allows instant retrieval of a student’s record by roll number.

Q2. Explain the difference between mutable and immutable data types with examples.

Ans:

1. Mutable (Changeable after creation):

Examples: list, dict, set.

Memory is not reallocated, data can be modified in-place.

a = [1, 2, 3]
a.append(4)    # [1, 2, 3, 4]

2. Immutable (Cannot be changed):

Examples: tuple, string, int, float.

Any modification creates a new object in memory.

s = "hello"
s = s + " world"   # Creates a new string, old "hello" discarded

Q3. What are the main differences between lists and tuples in Python?

ANS: The main difference between lists and tuples in Python is that lists are mutable while tuples are immutable. This means the elements of a list can be changed, added, or removed after the list is created, but a tuple cannot be modified once it is defined. Lists are written using square brackets [ ], while tuples are written using parentheses ( ). Because tuples are immutable, they are generally faster and take up less memory compared to lists.

Example:

 List - mutable
my_list = [1, 2, 3]
my_list[0] = 10   # Allowed

 Tuple - immutable
my_tuple = (1, 2, 3)
 my_tuple[0] = 10  # Not allowed

Q4. Describe how dictionaries store data.

ANS:

A dictionary uses a hash table to store key-value pairs.

Each key is converted to a hash code using Python’s hash() function.

Hash maps the key to an index in memory, pointing to the value.

Diagram (conceptual):

Dictionary = { "name": "Alice", "age": 30 }

Hash("name") → Index 101 → "Alice"
Hash("age")  → Index 205 → 30

Q5. Why might you use a set instead of a list in Python?

ANS:

Sets automatically remove duplicates.

Set operations (union, intersection, difference) are faster than manual list checks.

Example:

List of voters with duplicates → Convert to a set to keep unique voters.

Checking membership in a set (in) is O(1), while in a list it is O(n).

Q6. What is a string in Python, and how is it different from a list?

ANS:

String: Immutable sequence of characters.

List: Mutable collection of elements.

Differences:

Strings can only hold characters; lists can hold any type.

Strings cannot be modified directly; lists can.

s = "hello"
s[0] = "H"
l = ['h','e','l','l','o']
l[0] = 'H'

Q7. How do tuples ensure data integrity in Python?

ANS:

Tuples are immutable, meaning values cannot be changed after creation.

Useful when storing constant data (e.g., configuration settings, GPS coordinates).

Example:

config = ("localhost", 3306)  # Database connection (host, port)

Q8. What is a hash table, and how does it relate to dictionaries in Python?

ANS:

A hash table is a data structure that maps keys to values using a hashing function.

Python dictionaries are implemented as hash tables.

Average complexity for insert, delete, and search is O(1).

Example:

phonebook = {"Alice": "123", "Bob": "456"}
print(phonebook["Bob"])  # Lookup O(1)

Q9. Can lists contain different data types in Python?

ANS:

Yes. Python lists are heterogeneous.

mixed = [1, "apple", 3.14, True, [5,6]]
This flexibility makes lists very powerful.

Q10. Explain why strings are immutable in Python.

ANS: Strings are immutable because:

1. Performance → Reusing objects instead of modifying saves memory.

2. Security → Prevents accidental or malicious changes (useful in passwords).

3. Hashability → Allows strings to be used as dictionary keys.

Q11. What advantages do dictionaries offer over lists for certain tasks?

ANS:

Fast lookup by keys (O(1)).

Data stored in a meaningful key-value relationship instead of numeric indexes.

Better suited for real-world mappings (ID → Student, Word → Meaning).

Q12. Describe a scenario where using a tuple would be preferable over a list.

ANS:

Fixed configuration: (server IP, port).

Coordinates: (x, y, z).

Days of the week: Should not change.

Q13. How do sets handle duplicate values in Python?

ANS:

Sets ignore duplicates automatically.
s = {1,2,2,3,4}
print(s)  # {1,2,3,4}

Q14. How does the “in” keyword work differently for lists and dictionaries?

ANS:

List: Checks for element existence.

Dictionary: Checks for key existence, not value.

print(2 in [1,2,3])  # True
print("age" in {"name":"Alice", "age":25})  # True

Q15. Can you modify the elements of a tuple? Explain why or why not.

ANS:

No, because tuples are immutable.

This ensures data safety and prevents unintentional changes.

Q16. What is a nested dictionary, and give an example of its use case.

ANS: A dictionary that contains another dictionary.

Example:

student = {
    "name": "Alice",
    "marks": {"math": 95, "science": 88}
}
print(student["marks"]["math"])  # 95

Q17. Describe the time complexity of accessing elements in a dictionary.

Ans:

Average Case: O(1) (direct hash lookup).

Worst Case: O(n) (if hash collisions happen).

Q18. In what situations are lists preferred over dictionaries?

Ans:

When order matters.

When storing duplicates.

When accessing by index instead of keys.

Example: Maintaining a to-do list in order.

Q19. Why are dictionaries considered unordered, and how does that affect data retrieval?

Ans:

Before Python 3.7, dictionaries were unordered.

From Python 3.7+, they preserve insertion order.

Retrieval is still by key, not position.

Q20. Explain the difference between a list and a dictionary in terms of data retrieval.

Ans: A list retrieves elements using their index positions, where the first element is at index 0, the second at index 1, and so on. This makes lists useful when the order of elements is important or when you want to access data by its position.

On the other hand, a dictionary retrieves elements using keys instead of numeric indexes. Each key in a dictionary maps to a value, allowing faster and more meaningful lookups. Since keys are unique, dictionaries are best when you want to quickly access data based on a label or identifier rather than its position.

Example:

1. List retrieval by index
my_list = ["apple", "banana", "cherry"]
print(my_list[1])   # Output: banana

2. Dictionary retrieval by key
my_dict = {"fruit1": "apple", "fruit2": "banana", "fruit3": "cherry"}
print(my_dict["fruit2"])  # Output: banana

# Practical Questions with Python Code:
"""

# 1. Create a string with your name
print("Q1. Create a string with your name")
name = "Aman"
print(name)

# 2. Length of "Hello World"
print("Q2. Find the length of the string 'Hello World'")
print(len("Hello World"))

# 3. Slice first 3 chars from "Python Programming"
print("Q3. Slice the first 3 characters from 'Python Programming'")
print("Python Programming"[:3])

# 4. Convert "hello" to uppercase
print("Q4. Convert 'hello' to uppercase")
print("hello".upper())

# 5. Replace "apple" with "orange"
print("Q5. Replace 'apple' with 'orange' in the string 'I like apple'")
print("I like apple".replace("apple", "orange"))

# 6. List with numbers 1 to 5
print("Q6. Create a list with numbers 1 to 5")
nums = [1, 2, 3, 4, 5]
print(nums)

# 7. Append 10 to list
print("Q7. Append the number 10 to the list [1, 2, 3, 4]")
lst = [1, 2, 3, 4]
lst.append(10)
print(lst)

# 8. Remove 3 from list
print("Q8. Remove the number 3 from the list [1, 2, 3, 4, 5]")
lst2 = [1, 2, 3, 4, 5]
lst2.remove(3)
print(lst2)

# 9. Access 2nd element
print("Q9. Access the second element in the list ['a', 'b', 'c', 'd']")
letters = ['a', 'b', 'c', 'd']
print(letters[1])

# 10. Reverse list
print("Q10. Reverse the list [10, 20, 30, 40, 50]")
nums2 = [10, 20, 30, 40, 50]
nums2.reverse()
print(nums2)

# 11. Create a tuple
print("Q11. Create a tuple with elements 100, 200, 300")
t = (100, 200, 300)
print(t)

# 12. Access second-to-last element
print("Q12. Access the second-to-last element of ('red', 'green', 'blue', 'yellow')")
colors = ('red', 'green', 'blue', 'yellow')
print(colors[-2])

# 13. Find min number in tuple
print("Q13. Find the minimum number in the tuple (10, 20, 5, 15)")
t2 = (10, 20, 5, 15)
print(min(t2))

# 14. Find index of "cat"
print("Q14. Find the index of 'cat' in the tuple ('dog', 'cat', 'rabbit')")
animals = ('dog', 'cat', 'rabbit')
print(animals.index("cat"))

# 15. Check if 'kiwi' in tuple
print("Q15. Create a tuple with fruits and check if 'kiwi' is in it")
fruits = ("apple", "banana", "mango")
print("kiwi" in fruits)

# 16. Create set
print("Q16. Create a set with the elements 'a', 'b', 'c'")
s = {'a', 'b', 'c'}
print(s)

# 17. Clear set
print("Q17. Clear all elements from the set {1, 2, 3, 4, 5}")
s2 = {1, 2, 3, 4, 5}
s2.clear()
print(s2)

# 18. Remove element 4 from set
print("Q18. Remove the element 4 from the set {1, 2, 3, 4}")
s3 = {1, 2, 3, 4}
s3.remove(4)
print(s3)

# 19. Union of sets
print("Q19. Find the union of sets {1, 2, 3} and {3, 4, 5}")
print({1, 2, 3} | {3, 4, 5})

# 20. Intersection of sets
print("Q20. Find the intersection of sets {1, 2, 3} and {2, 3, 4}")
print({1, 2, 3} & {2, 3, 4})

# 21. Create dictionary
print("Q21. Create a dictionary with keys 'name', 'age', 'city'")
d = {"name": "John", "age": 25, "city": "New York"}
print(d)

# 22. Add new key-value pair
print("Q22. Add 'country':'USA' to {'name': 'John', 'age': 25}")
d2 = {'name': 'John', 'age': 25}
d2["country"] = "USA"
print(d2)

# 23. Access value by key
print("Q23. Access the value of 'name' from {'name':'Alice', 'age':30}")
d3 = {'name': 'Alice', 'age': 30}
print(d3["name"])

# 24. Remove key "age"
print("Q24. Remove the key 'age' from {'name': 'Bob', 'age': 22, 'city': 'New York'}")
d4 = {'name': 'Bob', 'age': 22, 'city': 'New York'}
d4.pop("age")
print(d4)

# 25. Check if "city" key exists
print("Q25. Check if 'city' exists in {'name': 'Alice', 'city': 'Paris'}")
d5 = {'name': 'Alice', 'city': 'Paris'}
print("city" in d5)

# 26. Create list, tuple, dict
print("Q26. Create a list, tuple, and dictionary, and print them all")
print([1, 2, 3], (4, 5, 6), {"a": 10, "b": 20})

# 27. Random list of 5 numbers, sort ascending
print("Q27. Create a list of 5 random numbers between 1 and 100, sort in ascending order")
import random
rand_nums = random.sample(range(1, 101), 5)
rand_nums.sort()
print(rand_nums)

# 28. List with strings, print 3rd index
print("Q28. Create a list with strings and print element at 3rd index")
words = ["apple", "banana", "cherry", "date"]
print(words[3])

# 29. Combine dictionaries
print("Q29. Combine two dictionaries into one")
d6 = {"a": 1, "b": 2}
d7 = {"c": 3, "d": 4}
d6.update(d7)
print(d6)

# 30. Convert list of strings into set
print("Q30. Convert a list of strings into a set")
string_list = ["apple", "banana", "apple"]
print(set(string_list))


Q1. Create a string with your name
Aman
Q2. Find the length of the string 'Hello World'
11
Q3. Slice the first 3 characters from 'Python Programming'
Pyt
Q4. Convert 'hello' to uppercase
HELLO
Q5. Replace 'apple' with 'orange' in the string 'I like apple'
I like orange
Q6. Create a list with numbers 1 to 5
[1, 2, 3, 4, 5]
Q7. Append the number 10 to the list [1, 2, 3, 4]
[1, 2, 3, 4, 10]
Q8. Remove the number 3 from the list [1, 2, 3, 4, 5]
[1, 2, 4, 5]
Q9. Access the second element in the list ['a', 'b', 'c', 'd']
b
Q10. Reverse the list [10, 20, 30, 40, 50]
[50, 40, 30, 20, 10]
Q11. Create a tuple with elements 100, 200, 300
(100, 200, 300)
Q12. Access the second-to-last element of ('red', 'green', 'blue', 'yellow')
blue
Q13. Find the minimum number in the tuple (10, 20, 5, 15)
5
Q14. Find the index of 'cat' in the tuple ('dog', 'cat', 'rabbit')
1
Q15. Create a tuple with fruits and check if 'kiwi' is in it
False
Q16. Create a set with the elements 'a', 'b', 'c'
{'a', 'b', 'c'}
Q17. Clear all elements from the set {1, 2, 3, 4, 5}
set()
Q18. Remove the element 4 from the set {1, 2, 3, 4}
{1, 2, 3}
Q19. Find the union of sets {1, 2, 3} and {3, 4, 5}
{1, 2, 3, 4, 5}
Q20. Find the intersection of sets {1, 2, 3} and {2, 3, 4}
{2, 3}
Q21. Create a dictionary with keys 'name', 'age', 'city'
{'name': 'John', 'age': 25, 'city': 'New York'}
Q22. Add 'country':'USA' to {'name': 'John', 'age': 25}
{'name': 'John', 'age': 25, 'country': 'USA'}
Q23. Access the value of 'name' from {'name':'Alice', 'age':30}
Alice
Q24. Remove the key 'age' from {'name': 'Bob', 'age': 22, 'city': 'New York'}
{'name': 'Bob', 'city': 'New York'}
Q25. Check if 'city' exists in {'name': 'Alice', 'city': 'Paris'}
True
Q26. Create a list, tuple, and dictionary, and print them all
[1, 2, 3] (4, 5, 6) {'a': 10, 'b': 20}
Q27. Create a list of 5 random numbers between 1 and 100, sort in ascending order
[44, 46, 75, 85, 88]
Q28. Create a list with strings and print element at 3rd index
date
Q29. Combine two dictionaries into one
{'a': 1, 'b': 2, 'c': 3, 'd': 4}
Q30. Convert a list of strings into a set
{'banana', 'apple'}